plugins {
    id 'io.codearte.nexus-staging' version '0.21.1'
}

allprojects {
    apply plugin: "java"
    apply plugin: 'maven'
    apply plugin: 'signing'

    version = "${project_version}" + getBuildNumber() + (isSnapshot() ? "-snapshot" : '')

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        archiveClassifier = "javadoc"
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jar {
        manifest {
            attributes([
                'Timestamp'               : System.currentTimeMillis(),
                'Specification-Title'     : "${archivesBaseName}",
                'Specification-Vendor'    : "Diluv",
                'Specification-Version'   : "${archiveVersion.getOrNull()}",
                'Implementation-Title'    : "${archivesBaseName}",
                'Implementation-Version'  : "${archiveVersion.getOrNull()}",
                'Implementation-Vendor'   : "Diluv",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
            ])
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (System.getenv("GPG_KEYNAME")) {
            println "Configuring GPG KEY NAME"
            ext."signing.gnupg.keyName" = System.getenv("GPG_KEYNAME");
        }
    }

    signing {
        useGpgCmd()
        sign configurations.archives
    }

    tasks.withType(Sign) {
        onlyIf { !isSnapshot() }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
                }

                pom.project {

                    name "${archivesBaseName}"
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/Diluv/Catalejo/'

                    scm {
                        connection 'scm:git:git://github.com/Diluv/Catalejo.git'
                        developerConnection 'scm:git:ssh://github.com/Diluv/Catalejo.git'
                        url 'https://github.com/Diluv/Catalejo'
                    }

                    licenses {
                        license {
                            name 'GNU Lesser General Public License v2.1'
                            url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'
                        }
                    }

                    developers {
                        developer {
                            id 'lclc98'
                            name 'lclc98'
                            email 'lclc98@lclc98.com'
                        }
                    }
                }
            }
        }
    }
}

group = "${project_group}"
archivesBaseName = "${project_name}"
description = 'A Java library for discovering the meta data of files'

subprojects {
    dependencies {
        compile rootProject
    }
}

nexusStaging {
    stagingProfileId = '1282c5e0d73bd2'
    username = System.getenv("OSSRH_USERNAME")
    password = System.getenv("OSSRH_PASSWORD")
}

static String getBuildNumber() {
    return System.getenv("BUILD_NUMBER") ?: "0"
}

static boolean isSnapshot() {
    String ref = System.getenv("GITHUB_REF");
    if (ref != null && ref.startsWith("refs/tags/v")) {
        return false
    }
    return true
}