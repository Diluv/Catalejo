allprojects {
    apply plugin: "java"
    apply plugin: 'maven'
    apply plugin: 'signing'

    version = "${project_version}" + getBuildNumber() + isSnapshot()

    task sourcesJar(type: Jar, dependsOn: classes) {
        description = "Creates a jar file containing the sources for the project in the build directory."
        from sourceSets.main.allSource
        classifier = "sources"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        description = "Creates a jar file containing the javadocs for the project in the build directory."
        from javadoc.destinationDir
        classifier = "javadoc"
    }

    task buildJar(type: Jar) {
        description = "Creates a standard jar file containing the compiled java classes for this library."
        from sourceSets.main.output
    }

    artifacts {
        archives buildJar
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        jcenter()
    }
    
    dependencies {
    
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
        
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'
    }
    
    test {
        useJUnitPlatform()
        testLogging {
		    events "passed", "skipped", "failed"
	    }
    }

    jar {
        manifest {
            attributes([
                'Timestamp': System.currentTimeMillis(),
                'Specification-Title': project.archivesBaseName,
                'Specification-Vendor': "Diluv",
                'Specification-Version': "${version}",
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Version': project.version,
                'Implementation-Vendor' :"Diluv",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})"
            ])
        }
    }

    signing {
        useGpgCmd()
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
                }

                pom.project {

                    name project.archivesBaseName
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/Diluv/Catalejo/'

                    scm {
                        connection 'scm:git:git://github.com/Diluv/Catalejo.git'
                        developerConnection 'scm:git:ssh://github.com/Diluv/Catalejo.git'
                        url 'https://github.com/Diluv/Catalejo'
                    }

                    licenses {
                        license {
                            name 'GNU Lesser General Public License v2.1'
                            url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'
                        }
                    }

                    developers {
                        developer {
                            id 'lclc98'
                            name 'lclc98'
                            email 'lclc98@lclc98.com'
                        }
                    }
                }
            }
        }
    }
}

group = "${project_group}"
archivesBaseName = "${project_name}"
description = 'A Java library for discovering the meta data of files'

subprojects {
    dependencies {
        compile rootProject
    }
}

static String getBuildNumber() {
    return System.getenv("BUILD_NUMBER") ?: "0"
}

static String isSnapshot() {
    return System.getenv("GITHUB_REF").startsWith("v") ? "" : "-snapshot"
}